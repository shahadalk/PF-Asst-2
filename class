from enum import Enum

class DentistSpecialist(Enum):
    General_Dentist = 1
    Pedodontist = 2
    Orthodontist = 3

class StaffGender(Enum):
    Female = 1
    Male = 2

class PatientGender(Enum):
    Female = 1
    Male = 2

class DentalCompany:
    """Class to represent Dental Company"""
    def __init__(self, name):
        self.name = name
        self.branches = []

    def add_branch(self, branch):
        self.branches.append(branch)

    def remove_branch(self, branch):
        self.branches.remove(branch)

    def display_information(self):
        print(f"Dental Company Name: {self.name}")
        print("List of Branches: ")
        for branch in self.branches:
            print(f"- {branch.branch_address}")

class Branch:
    """Class to represent Branch"""
    def __init__(self, address, phonenum, reviews, manager):
        self.branch_address = address
        self.branch_phonenum = phonenum
        self.branch_avg_reviews = reviews
        self.branch_manager = manager
        self.branch_staff = []
        self.branch_patients = []

    def add_branch_staff(self, staff):
        self.branch_staff.append(staff)

    def remove_branch_staff(self, staff):
        self.branch_staff.remove(staff)

    def add_branch_patients(self, patients):
        self.branch_patients.append(patients)

    def remove_branch_patients(self, patients):
        self.branch_patients.remove(patients)

    def display_information(self):
        print(f"Branch Address: {self.branch_address}")
        print(f"Phone Number: {self.branch_phonenum}")
        print(f"Average Reviews: {self.branch_avg_reviews}")
        print(f"Manager: {self.branch_manager.staff_name}","\n" + "_" * 35)
        print("List of Staff: ")
        for staff in self.branch_staff:
            print(f"- {staff.staff_name}","\n" + "_" * 35)
        print("List of Patients: ")
        for patient in self.branch_patients:
            print(f"- {patient.patient_name}", "\n" + "_" * 35)

class Staff:
    """Class to represent Staff"""
    def __init__(self, name, phonenum, email, staff_ID, age, gender):
        self.staff_name = name
        self.staff_phonenum = phonenum
        self.staff_email = email
        self.staff_ID = staff_ID
        self.staff_age = age
        self.staff_gender = gender

    def display_information(self):
        print("\n", f"Staff Name: {self.staff_name}")
        print(f"Phone Number: {self.staff_phonenum}")
        print(f"Email: {self.staff_email}")
        print(f"Staff ID: {self.staff_ID}")
        print(f"Age: {self.staff_age}")
        print(f"Gender: {self.staff_gender}")

class Manager(Staff):
    """Class to represent Manager"""
    def __init__(self, name, phonenum, email, staff_ID, age, gender, position, manager_ID):
        super().__init__(name, phonenum, email, staff_ID, age, gender)
        self.manager_position = position
        self.manager_ID = manager_ID

    def display_information(self):
        super().display_information()
        print(f"Position: {self.manager_position}")
        print(f"Manager ID: {self.manager_ID}", "\n" + "_" * 35)

class Receptionist(Staff):
    """Class to represent Receptionist"""
    def __init__(self, name, phonenum, email, staff_ID, age, gender, shift, receptionist_ID):
        super().__init__(name, phonenum, email, staff_ID, age, gender)
        self.receptionist_shift = shift
        self.receptionist_ID = receptionist_ID

    def display_information(self):
        print("Receptionist Information:","\n" + "_" * 35)
        print("Name:", self.staff_name)
        print("Phone Number:", self.staff_phonenum)
        print("Email:", self.staff_email)
        print("Staff ID:", self.staff_ID)
        print("Age:", self.staff_age)
        print("Gender:", self.staff_gender)
        print("Shift:", self.receptionist_shift)
        print("Receptionist ID:", self.receptionist_ID,"\n" + "_" * 35)

class Nurse(Staff):
    """Class to represent Nurse"""
    def __init__(self, name, phonenum, email, staff_ID, age, gender, shift, nurse_ID):
        super().__init__(name, phonenum, email, staff_ID, age, gender)
        self.nurse_shift = shift
        self.nurse_ID = nurse_ID

    def display_information(self):
        print("Nurse Information:","\n" + "_" * 35)
        print("Name:", self.staff_name)
        print("Phone Number:", self.staff_phonenum)
        print("Email:", self.staff_email)
        print("Staff ID:", self.staff_ID)
        print("Age:", self.staff_age)
        print("Gender:", self.staff_gender)
        print("Shift:", self.nurse_shift)
        print("Nurse ID:", self.nurse_ID,"\n" + "_" * 35)

class Dentist(Staff):
    """Class to represent Dentist"""
    def __init__(self, name, phonenum, email, staff_ID, age, gender, specialist, dentist_ID):
        super().__init__(name, phonenum, email, staff_ID, age, gender)
        self.dentist_specialist = specialist
        self.dentist_ID = dentist_ID

    def display_information(self):
        print("Dentist Information:","\n" + "_" * 35)
        print("Name:", self.staff_name)
        print("Phone Number:", self.staff_phonenum)
        print("Email:", self.staff_email)
        print("Staff ID:", self.staff_ID)
        print("Age:", self.staff_age)
        print("Gender:", self.staff_gender)
        print("Specialist:", self.dentist_specialist)
        print("Dentist ID:", self.dentist_ID,"\n" + "_" * 35)

class Patient:
    """Class to represent Patient"""
    def __init__(self, name, phonenum, email, age, gender):
        self.patient_name = name
        self.patient_phonenum = phonenum
        self.patient_email = email
        self.patient_age = age
        self.patient_gender = gender
        self.appointments = []
        self.total_cost = 0

    def add_patient_appointment(self, appointment):
        self.appointments.append(appointment)
        self.total_cost += appointment.get_total_cost()

    def remove_patient_appointment(self, appointment):
        self.appointments.remove(appointment)
        self.total_cost -= appointment.get_total_cost()

    def display_information(self):
        print("Patient Information:","\n" + "_" * 35)
        print("Name:", self.patient_name)
        print("Phone Number:", self.patient_phonenum)
        print("Email:", self.patient_email)
        print("Age:", self.patient_age)
        print("Gender:", self.patient_gender)
        print("Appointments:")
        for appointment in self.appointments:
            appointment.display_information()
        print("Total Cost:", self.total_cost, "\n" + "_" * 35)

class Appointment:
    """Class to represent Appointment"""
    def __init__(self, appointment_date, appointment_time, service_type, cost):
        self.appointment_date = appointment_date
        self.appointment_time = appointment_time
        self.appointment_service_type = service_type
        self.appointment_cost = cost

    def get_total_cost(self):
        return self.appointment_cost * 1.05  # Add 5% VAT

    def display_information(self):
        print("Appointment Date:", self.appointment_date)
        print("Appointment Time:", self.appointment_time)
        print("Service Type:", self.appointment_service_type)
        print("Cost:", self.appointment_cost)
        print("Total Cost (incl. VAT):", self.get_total_cost(),"\n")

# Create a dental company
dental_company = DentalCompany("Bright Smiles")

# Create a branch and add it to the company
branch1 = Branch("123 Main St", "025837698", 4.5, None)
dental_company.add_branch(branch1)
branch1 = Branch("537 Main St", "025854876", 3.9, None)
dental_company.add_branch(branch1)
dental_company.display_information()

# Create a manager for the branch
manager1 = Manager("John Doe", "0522225115", "johndoe@brightsmiles.com", "1234", 40, StaffGender.Male, "Branch Manager", "5678")
branch1.branch_manager = manager1

# Create a receptionist for the branch
receptionist1 = Receptionist("Jane Smith", "0502845123", "janesmith@brightsmiles.com", "2345", 25, StaffGender.Female, "Morning Shift", "6789")
branch1.add_branch_staff(receptionist1)

# Create a nurse for the branch
nurse1 = Nurse("Bob Johnson", "0542225395", "bobjohnson@brightsmiles.com", "3456", 30, StaffGender.Male, "Evening Shift", "7890")
branch1.add_branch_staff(nurse1)

# Create a dentist for the branch
dentist1 = Dentist("Dr. Sarah Lee", "0502845388", "sarahlee@brightsmiles.com", "4567", 35, StaffGender.Female, DentistSpecialist.Orthodontist, "8901")
branch1.add_branch_staff(dentist1)

# Display information for the manager, receptionist, nurse, dentist, and patient
manager1.display_information()
receptionist1.display_information()
nurse1.display_information()
dentist1.display_information()

# Create a patient
patient1 = Patient("Shahad Ahmed", "0502845395", "shahadahmed@gmail.com", 20, PatientGender.Female)

# Create appointments for the patient
appointment1 = Appointment("2023-04-20", "10:00am", "Cleaning", 100)
appointment2 = Appointment("2023-04-25", "2:00pm", "Filling", 150)
appointment3 = Appointment("2023-05-01", "9:00am", "Extraction", 200)

# Add appointments to the patient and update their total cost
patient1.add_patient_appointment(appointment1)
patient1.add_patient_appointment(appointment2)
patient1.add_patient_appointment(appointment3)

# Display the patient's information including appointments and total cost
patient1.display_information()

patient2 = Patient("Mariam Salem", "0560354421", "mariamsalem@gmail.com", 30, PatientGender.Female)

# Create appointments for the patient
appointment1 = Appointment("2023-02-17", "1:00pm", "Cleaning", 130)
appointment2 = Appointment("2023-04-28", "7:30pm", "Extraction", 250)
appointment3 = Appointment("2023-12-01", "11:00am", "Filling", 150)

# Add appointments to the patient and update their total cost
patient2.add_patient_appointment(appointment1)
patient2.add_patient_appointment(appointment2)
patient2.add_patient_appointment(appointment3)

# Display the patient's information including appointments and total cost
patient2.display_information()
